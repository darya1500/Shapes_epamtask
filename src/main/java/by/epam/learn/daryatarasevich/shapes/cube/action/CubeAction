package by.epam.learn.daryatarasevich.shapes.cube.action;

import by.epam.learn.daryatarasevich.shapes.cube.entity.Cube;
import by.epam.learn.daryatarasevich.shapes.cube.entity.Point;
import by.epam.learn.daryatarasevich.shapes.cube.constant.MessageConstants;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


public class CubeAction {
    private final int CUBE_AREA_CONSTANT=6;
    private final int CUBE_VOLUME_CONSTANT=3;
    private static final Logger logger = LogManager.getLogger(CubeAction.class);

    public CubeAction() {
    }
    /**
     * Calculate cube area by formula: S=6*a*a, where a - is cube side
     *
     * @param cube
     * @return area
     */
    public int countCubeArea(Cube cube){
      if (cube==null) {
          logger.error(MessageConstants.CUBE_IS_NULL);
      throw new NullPointerException(MessageConstants.CUBE_IS_NULL);
      }
        int side=countCubeSide(cube);
        int area=CUBE_AREA_CONSTANT*side*side;
        return area;
    }
    /**
     * Calculate cube volume by formula: V=a*a*a, where a - is cube side
     *
     * @param cube
     * @return volume
     */
    public int countCubeVolume(Cube cube){
        if (cube==null) {
            logger.error(MessageConstants.CUBE_IS_NULL);
            throw new NullPointerException(MessageConstants.CUBE_IS_NULL);
        }
        int side=countCubeSide(cube);
        int volume= (int) Math.pow(side,CUBE_VOLUME_CONSTANT);
        return volume;
    }
    /**
     * Calculate cube side by formula: side=b-a, where b - is cube coordinate x of point 1,
     * a- is cube coordinate x of point 0. As all cube sides are equal. All points should be in specific order.
     *
     * @param cube
     * @return side
     */
    public int countCubeSide(Cube cube){
        if (cube==null) {
            logger.error(MessageConstants.CUBE_IS_NULL);
            throw new NullPointerException(MessageConstants.CUBE_IS_NULL);
        }
        Point[] points=cube.getPoints();
        int side=Math.abs(points[1].getX()-points[0].getX());
        return side;
    }
    /**
     * Calculate cube volume ratio divided by plane x by formula: ratio=v1/v2, where v1-is volume of upper part,
     * v2-volume of lower part of cube divided by x plane. Cube is located parallel to planes x,y,z.
     *
     * @param cube
     * @return ratio
     */
    public double countVolumeRatioDividedByXPlane(Cube cube){
        if (cube==null) {
            logger.error(MessageConstants.CUBE_IS_NULL);
            throw new NullPointerException(MessageConstants.CUBE_IS_NULL);
        }
        Point[] points=cube.getPoints();
        double up=points[0].getY();
        double down=points[4].getY();
        if (up<=0||down>=0){
            return 0;
        }
        double volumeFirst= countVolumeFirst(cube, up);
        double volumeSecond= countVolumeSecond(cube, down);
        double ratio=volumeFirst/volumeSecond;
        return ratio;
    }
    /**
     * Calculate cube volume of upper part,of cube divided by x plane by formula: V1=V*r, where V is total volume of cube,
     * r is calculated by formula r=a/b, where a is part of cube side located upper than x plane,b is cube side.
     *up is coordinate x of the cube side located upper than x plane.
     *
     * @param cube
     * @param up
     * @return volumeFirst
     */
    private double countVolumeFirst(Cube cube, double up){
        int allVolume=countCubeVolume(cube);
        int side=countCubeSide(cube);
        double ratio=up/side;
        double volumeFirst=allVolume*ratio;
        return volumeFirst;
    }
    /**
     * Calculate cube volume of upper part,of cube divided by x plane by formula: V2=V*r, where V is total volume of cube,
     * r is calculated by formula r=Math.abs(a/b), where a is part of cube side located lowerthan x plane,b is cube side.
     *down is coordinate x of the cube side located lower than x plane.
     *
     * @param cube
     * @param down
     * @return volumeSecond
     */
    private double countVolumeSecond(Cube cube, double down){
        int allVolume=countCubeVolume(cube);
        int side=countCubeSide(cube);
        double ratio= Math.abs(down/side);
        double volumeSecond=allVolume*ratio;
        return volumeSecond;
    }
    /**
     * @param cube
     * @param coordinateName
     * @return true if cube is on coordinate
     */
    public boolean isCubeOnCoordinate(Cube cube,String coordinateName){
        if (cube==null) {
            logger.error(MessageConstants.CUBE_IS_NULL);
            throw new NullPointerException(MessageConstants.CUBE_IS_NULL); }
        Point[] points=cube.getPoints();
        int count=0;
        for (int i=0;i<points.length;i++){
        switch (coordinateName){
            case ("x"):
                    if (points[i].getX()==0){
                        count++; }
            case ("y"):
                    if (points[i].getY()==0){
                        count++; }
            case ("z"):
                    if (points[i].getZ()==0){
                        count++; }
        }}
        if (count==4){
                return true; }
        return false;
    }
    /**
     * @param o
     * @return true if object is cube
     */
    public boolean isCube(Object o){
        if (o==null) {
            logger.error(MessageConstants.CUBE_IS_NULL);
            throw new NullPointerException(MessageConstants.CUBE_IS_NULL);
        }
        return o.getClass().getSimpleName().equalsIgnoreCase("cube");
    }
}

