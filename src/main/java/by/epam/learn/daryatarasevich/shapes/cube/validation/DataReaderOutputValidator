package by.epam.learn.daryatarasevich.shapes.cube.validation;

import by.epam.learn.daryatarasevich.shapes.cube.constant.MessageConstants;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class DataReaderOutputValidator {
    private final int NUMBER_OF_POINTS_COORDINATES=24;
    private static final Logger LOGGER = LogManager.getLogger(Validator.class);

    public DataReaderOutputValidator() {
    }
    
    /**
     * Validate data in reader output by data length and containing number symbols only.
     *
     * @param string
     * @return true(if length of data and symbols are correct)
     */
    public boolean validateDataReaderOutput(String string){
        if (string==null) {
            LOGGER.error(MessageConstants.STRING_IS_NULL);
            throw new NullPointerException(MessageConstants.STRING_IS_NULL);
        }
        return validateDataLength(string)&&validateDataSymbols(string);
    }
    
    /**
     * Validate data length. Should be equal to NUMBER_OF_POINTS_COORDINATES.
     *
     * @param string
     * @return true(if length of data is correct)
     */
    private boolean validateDataLength(String string){
        string=string.replaceAll("\n","");
            String[] temporary=string.split(" ");
            if (temporary.length!=NUMBER_OF_POINTS_COORDINATES){
                LOGGER.info(MessageConstants.INVALID_NUMBER_OF_PARAMETERS);
                return false;
            }
        return true;
    }
    
    /**
     * Validate data containing number symbols only.
     *
     * @param string
     * @return true(if symbols are correct)
     */
    private boolean validateDataSymbols(String string){
        string=string.replaceAll("\n","");
            String[] temporary = string.trim().split(" ");
            for (int j=0;j<temporary.length;j++){
                if (temporary[j].matches("\\D")){
                    return false;
                }
        }
        return true;
    }
}
