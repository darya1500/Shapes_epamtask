package by.epam.learn.daryatarasevich.shapes.cube.comparator;

import by.epam.learn.daryatarasevich.shapes.cube.converter.DataConverter;
import by.epam.learn.daryatarasevich.shapes.cube.entity.Cube;
import by.epam.learn.daryatarasevich.shapes.cube.entity.Point;
import by.epam.learn.daryatarasevich.shapes.cube.exception.InvalidDataInputException;
import by.epam.learn.daryatarasevich.shapes.cube.repository.ShapeRepository;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import java.util.ArrayList;
import java.util.List;
import static org.testng.Assert.*;

public class IdComparatorTest {
    private Cube cube;
    private Cube cubeTwo;
    private IdComparator idComparator;
    private ShapeRepository repository;

    @BeforeMethod
    public void setUp() throws InvalidDataInputException {
        DataConverter dataConverter = new DataConverter();
        List<String> stringOfNumbers = new ArrayList<>();
        String s="0 2 0 2 2 0 2 2 2 0 2 2 0 0 0 2 0 0 2 0 2 0 0 2";
        String s2="0 1 0 4 1 0 4 1 4 0 1 4 0 -3 0 4 -3 0 4 -3 4 0 -3 4";
        stringOfNumbers.add(s);
        Point[] p = dataConverter.convertListOfStringsToListOfPoints(stringOfNumbers).get(0);
        cube =new Cube(p);
        repository=ShapeRepository.getInstance();
        repository.add(cube);
        stringOfNumbers.remove(s);
        stringOfNumbers.add(s2);
        p=dataConverter.convertListOfStringsToListOfPoints(stringOfNumbers).get(0);
        cubeTwo=new Cube(p);
        idComparator =new IdComparator();
        repository.add(cubeTwo);
    }
    
    @Test
    public void testCompare_WhenDataIsNotEqual_ShouldReturnCorrectResult() {
        int expected=2;
        assertNotEquals(idComparator.compare(cube,cubeTwo),expected);
    }
}
