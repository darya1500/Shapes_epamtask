package by.epam.learn.daryatarasevich.shapes.cube.validation;

import by.epam.learn.daryatarasevich.shapes.cube.entity.Point;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

public class ValidatorTest {
    private Validator validator;
    private Point[] points;

    @BeforeMethod
    public void setUp() {
        validator=new Validator();
        points= new Point[]{new Point(0, 1, 0), new Point(4, 1, 0),
                new Point(4, 1, 4), new Point(0, 1, 4),
                new Point(0, -3, 0), new Point(4, -3, 0),
                new Point(4, -3, 4), new Point(0, -3, 4)};
    }

    @Test
    public void testValidateCube_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validateCube(points));
    }

    @Test
    public void testValidatePoints_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validatePoints(points));
    }

    @Test(expectedExceptions = NullPointerException.class)
    public void testValidatePoints_WhenDataIsInCorrect_ShouldReturnIncorrectResult() {
        points=null;
        assertTrue(validator.validatePoints(points));
    }

    @Test
    public void testValidatePlanes_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validatePlanes(points));
    }

    @Test
    public void testValidateSides_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validateSides(points));
    }


    @Test
    public void testValidatePlaneY_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validatePlaneY(points));
    }

    @Test
    public void testValidatePlaneZ_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validatePlaneZ(points));
    }

    @Test
    public void testValidatePlaneX_WhenDataIsCorrect_ShouldReturnCorrectResult() {
        assertTrue(validator.validatePlaneX(points));
    }
}
